{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 23c561ef7cf5397b18fe","webpack:///./src/index.js","webpack:///./src/tasktimer.js","webpack:///./~/eventemitter3/index.js"],"names":[],"mappings":"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CO,OAAO,GAAP,MAAgB,SAD3B,EACsC;AAClC,oBAAO,GAAP,IAAc,SAAS,GAAT,CAAd;AACH;AACJ;AACD,YAAO,MAAP;AACH;;AAED;AACA;AACA;;mBAEe,S;;AAEf;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;AAaC;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;AC/mBD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,SAAS;AACpB,YAAW,MAAM;AACjB,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,QAAQ;AACnB,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA0D,OAAO;AACjE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAAyC,SAAS;AAClD;AACA;;AAEA;AACA,IAAG;AACH;AACA;;AAEA,gBAAe,YAAY;AAC3B;;AAEA;AACA,4DAA2D;AAC3D,gEAA+D;AAC/D,oEAAmE;AACnE;AACA,2DAA0D,SAAS;AACnE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,YAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,YAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,YAAW,MAAM;AACjB,YAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,iDAAgD,YAAY;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA,kCAAiC;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"tasktimer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TaskTimer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TaskTimer\"] = factory();\n\telse\n\t\troot[\"TaskTimer\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 23c561ef7cf5397b18fe\n **/","import TaskTimer from './tasktimer';\n// export default re;\n// http://stackoverflow.com/a/33683495/112731\nmodule.exports = TaskTimer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import EventEmitter from 'eventemitter3';\n\nconst DEFAULT = {\n    INTERVAL: 1000\n};\n\n/**\n *  TaskTimer • https://github.com/onury/tasktimer\n *  @license MIT\n *  @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\n\n/**\n *  A timer utility for running periodic tasks on the given interval ticks.\n *  This is useful when you want to run or schedule multiple tasks on a single\n *  timer instance.\n *\n *  This class extends `EventEmitter3` which is an `EventEmitter` implementation\n *  for both Node and browser. Only a small set of its methods are documented in\n *  this documentation. For a complete list, refer to Node.js documentation.\n *\n *  @see `{@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}`\n */\nclass TaskTimer extends EventEmitter {\n\n    // ---------------------------\n    // CONSTRUCTOR\n    // ---------------------------\n\n    /**\n     * Constructs a new `TaskTimer` instance with the given time interval (in milliseconds).\n     * @constructor\n     *\n     * @param {Number} [interval=1000] - Timer interval in milliseconds.\n     * Since the tasks run on ticks instead of millisecond intervals; this value\n     * operates as the base resolution for all tasks. If you are running heavy\n     * tasks, lower interval requires higher CPU power. This value can be\n     * updated any time by setting the `interval` property on the instance.\n     * @returns {Object} - A new instance of `TaskTimer`.\n     *\n     * @example\n     * var timer = new TaskTimer(1000); // milliseconds\n     * // Execute some code on each tick...\n     * timer.on(\"tick\", function () {\n     *     console.log(\"tick count: \" + timer.tickCount);\n     *     console.log(\"elapsed time: \" + timer.time.elapsed + \" ms.\");\n     * });\n     * // Or add a task named \"heartbeat\" that runs every 5 ticks and a total of 10 times.\n     * var task = {\n     *     name: \"heartbeat\",\n     *     tickInterval: 5, // ticks\n     *     totalRuns: 10, // times\n     *     callback: function (task) {\n     *         console.log(task.name + \" task has run \" + task.currentRuns + \" times.\");\n     *     }\n     * };\n     * timer.addTask(task).start();\n     */\n    constructor(interval = DEFAULT.INTERVAL) {\n        super();\n        this._ = {};\n        this._reset();\n        this._.interval = interval;\n    }\n\n    // ---------------------------\n    // PUBLIC (INSTANCE) PROPERTIES\n    // ---------------------------\n\n    /**\n     * Gets or sets the interval of the timer, in milliseconds.\n     * Note that this will directly affect each task's execution times.\n     *\n     * @memberof TaskTimer\n     * @type {Number}\n     */\n    get interval() {\n        return this._.interval;\n    }\n    set interval(value) {\n        this._.interval = value || DEFAULT.INTERVAL;\n    }\n\n    /**\n     * Gets the current state of the timer.\n     * For possible values, see `TaskTimer.State` enumeration.\n     *\n     * @memberof TaskTimer\n     * @type {Number}\n     * @readonly\n     */\n    get state() {\n        return this._.state;\n    }\n\n    /**\n     * Gets time information about the latest run of the timer.\n     * `instance.time.started` gives the start time of the timer.\n     * `instance.time.stopped` gives the stop time of the timer. (`0` if still running.)\n     * `instance.time.elapsed` gives the elapsed time of the timer.\n     *\n     * @memberof TaskTimer\n     * @type {Object}\n     * @readonly\n     */\n    get time() {\n        let current = this.state !== TaskTimer.State.STOPPED ? Date.now() : this._.stopTime;\n        return Object.freeze({\n            started: this._.startTime,\n            stopped: this._.stopTime,\n            elapsed: current - this._.startTime\n        });\n    }\n\n    /**\n     * Gets the current tick count for the latest run of the timer.\n     * This value will be reset to `0` when the timer is stopped or reset.\n     *\n     * @memberof TaskTimer\n     * @type {Number}\n     * @readonly\n     */\n    get tickCount() {\n        return this._.tickCount;\n    }\n\n    /**\n     * Gets the current task count. Tasks remain even after the timer is\n     * stopped. But they will be removed if the timer is reset.\n     *\n     * @memberof TaskTimer\n     * @type {Number}\n     * @readonly\n     */\n    get taskCount() {\n        return Object.keys(this._.tasks).length;\n    }\n\n    // ---------------------------\n    // PRIVATE (INSTANCE) METHODS\n    // ---------------------------\n\n    /**\n     * Stops the timer.\n     * @private\n     */\n    _stop() {\n        if (this._.timer) {\n            clearInterval(this._.timer);\n            this._.timer = null;\n        }\n    }\n\n    /**\n     * Resets the timer.\n     * @private\n     */\n    _reset() {\n        this._stop();\n        var interval = this._.interval;\n        this._ = {\n            interval: interval,\n            timer: null,\n            state: TaskTimer.State.IDLE,\n            tasks: {},\n            tickCount: 0,\n            startTime: 0,\n            stopTime: 0\n        };\n    }\n\n    /**\n     * Handler to be executed on each tick.\n     * @private\n     */\n    _tick() {\n        let name, task,\n            tasks = this._.tasks;\n\n        this._.tickCount += 1;\n        this.emit(TaskTimer.Event.TICK);\n\n        for (name in this._.tasks) {\n            if (tasks[name]) {\n                task = tasks[name];\n                if (this._.tickCount % task.tickInterval === 0) {\n                    if (!task.totalRuns || task.currentRuns < task.totalRuns) {\n                        task.currentRuns += 1;\n                        if (typeof task.callback === 'function') {\n                            task.callback(task);\n                        }\n                        this.emit(TaskTimer.Event.TASK, task);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Runs the timer.\n     * @private\n     */\n    _run() {\n        this._.timer = setInterval(() => {\n            // safe to use parent scope `this` in arrow functions.\n            this._tick();\n            this._.state = TaskTimer.State.RUNNING;\n        }, this._.interval);\n    }\n\n    // ---------------------------\n    // PUBLIC (INSTANCE) METHODS\n    // ---------------------------\n\n    /**\n     * Emits the given event with an optional event object.\n     * @memberof TaskTimer\n     * @alias TaskTimer#fire\n     * @chainable\n     *\n     * @param {String} eventName - The name of the event to be emitted.\n     * @param {Object} [object] - The event object that will be passed to the\n     * listener(s).\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     */\n    emit(eventName, object) {\n        var event = {\n            type: eventName,\n            source: this\n        };\n        switch (eventName) {\n            case TaskTimer.Event.TASK:\n            case TaskTimer.Event.TASK_ADDED:\n            case TaskTimer.Event.TASK_REMOVED:\n                event.task = object;\n                break;\n            default:\n                break;\n        }\n        super.emit(eventName, event);\n        return this;\n    }\n    /**\n     *  Alias for `#emit()`\n     *  @private\n     */\n    fire(eventName, object) {\n        return this.emit(eventName, object);\n    }\n\n    /**\n     * Gets the task with the given name.\n     * @memberof TaskTimer\n     *\n     * @param {String} name - Name of the task.\n     *\n     * @returns {Object} - Task.\n     */\n    getTask(name) {\n        return this._.tasks[name];\n    }\n\n    /**\n     * Adds a new task for the timer.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @todo options.autoRemove\n     *\n     * @param {Object|String} options - Task options. If a `String` is passed,\n     * a task with default options will be created with the given name.\n     *     @param {String} options.name - The unique name of the task.\n     *     @param {Number} [options.tickInterval=1] - Tick interval that the\n     *     task should be run on. The unit is \"ticks\" not milliseconds. For\n     *     instance, if the timer interval is 1000 milliseconds, and we add a\n     *     task with 5 tick intervals. The task will run on every 5 seconds.\n     *     @param {Number} [options.totalRuns=0] - Total number of times the\n     *     task should be run. `0` or `null` means unlimited (until the timer\n     *     has stopped).\n     *     @param {Function} [options.callback] - The callback function (task)\n     *     to be executed on each run. The task itself is passed to this\n     *     callback, as the single argument.\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     *\n     * @throws {Error} - If the task name is not set or a task with the given\n     * name already exists.\n     */\n    addTask(options = { tickInterval: 1, totalRuns: 0 }) {\n        if (typeof options === 'string') {\n            options = {\n                name: options,\n                tickInterval: 1,\n                totalRuns: 0\n            };\n        }\n        if (!options.name) {\n            throw new Error('Task name is required.');\n        }\n        if (this._.tasks[options.name]) {\n            throw new Error('Task with name \"' + options.name + '\" already exists.');\n        }\n        let task = _defaults(options, {\n            currentRuns: 0\n        });\n        this._.tasks[options.name] = task;\n        this.emit(TaskTimer.Event.TASK_ADDED, this.getTask(options.name));\n        return this;\n    }\n\n    /**\n     * Resets the current runs of the task, by its given name; and re-runs the\n     * task on the next interval tick.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @param {String} name - The name of the task to be removed.\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     *\n     * @throws {Error} - If a task with the given name does not exist.\n     */\n    resetTask(name) {\n        if (!name || !this._.tasks[name]) {\n            throw new Error('Task with name \"' + name + '\" does not exist.');\n        }\n        this._.tasks[name].currentRuns = 0;\n    }\n\n    /**\n     * Removes the task by the given name.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @param {String} name - The name of the task to be removed.\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     *\n     * @throws {Error} - If a task with the given name does not exist.\n     */\n    removeTask(name) {\n        if (!name || !this._.tasks[name]) {\n            throw new Error('Task with name \"' + name + '\" does not exist.');\n        }\n        var removedTask = this._.tasks[name];\n        this._.tasks[name] = null;\n        delete this._.tasks[name];\n        this.emit(TaskTimer.Event.TASK_REMOVED, removedTask);\n        return this;\n    }\n\n    /**\n     * Starts the timer and puts the timer in `RUNNING` state. If it's already\n     * running, this will reset the start/stop time and tick count, but will not\n     * reset (or remove) existing tasks.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     */\n    start() {\n        this._stop();\n        this._.startTime = Date.now();\n        this._.stopTime = 0;\n        this._.tickCount = 0;\n        this._run();\n        this._.state = TaskTimer.State.RUNNING;\n        this.emit(TaskTimer.Event.STARTED);\n        return this;\n    }\n\n    /**\n     * Pauses the timer, puts the timer in `PAUSED` state and all tasks on hold.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     */\n    pause() {\n        if (this.state !== TaskTimer.State.RUNNING) return this;\n        this._stop();\n        this._.state = TaskTimer.State.PAUSED;\n        this.emit(TaskTimer.Event.PAUSED);\n        return this;\n    }\n\n    /**\n     * Resumes the timer and puts the timer in `RUNNING` state; if previuosly\n     * paused. In this state, all existing tasks are resumed.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     */\n    resume() {\n        if (this.state !== TaskTimer.State.PAUSED) return this;\n        this._run();\n        this._.state = TaskTimer.State.RUNNING;\n        this.emit(TaskTimer.Event.RESUMED);\n        return this;\n    }\n\n    /**\n     * Stops the timer and puts the timer in `STOPPED` state. In this state, all\n     * existing tasks are stopped and no values or tasks are reset until\n     * re-started or explicitly calling reset.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     */\n    stop() {\n        if (this.state !== TaskTimer.State.RUNNING) return this;\n        this._stop();\n        this._.stopTime = Date.now();\n        this._.state = TaskTimer.State.STOPPED;\n        this.emit(TaskTimer.Event.STOPPED);\n        return this;\n    }\n\n    /**\n     * Stops the timer and puts the timer in `IDLE` state.\n     * This will reset the ticks and removes all tasks silently; meaning no\n     * other events will be emitted such as `\"taskRemoved\"`.\n     * @memberof TaskTimer\n     * @chainable\n     *\n     * @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n     */\n    reset() {\n        this._reset();\n        this.emit(TaskTimer.Event.RESET);\n        return this;\n    }\n\n    /**\n     *  `EventEmitter3` is said to be a drop-in replacement for Node's\n     *  `EventEmitter` but it lacks `listenerCount()` method.\n     *  @private\n     */\n    listenerCount(eventName) {\n        return this.listeners(eventName).length;\n    }\n\n}\n\n// ---------------------------\n// PUBLIC (STATIC) PROPERTIES\n// ---------------------------\n\n/**\n * Enumerates the `TaskTimer` event types.\n * @enum {String}\n * @readonly\n */\nTaskTimer.Event = Object.freeze({\n    /**\n     * Emitted on each tick (interval) of `TaskTimer`.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    TICK: 'tick',\n    /**\n     * Emitted when the timer is put in `RUNNING` state; such as when the timer is\n     * started.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    STARTED: 'started',\n    /**\n     * Emitted when the timer is put in `RUNNING` state; such as when the timer is\n     * resumed.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    RESUMED: 'resumed',\n    /**\n     * Emitted when the timer is put in `PAUSED` state.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    PAUSED: 'paused',\n    /**\n     * Emitted when the timer is put in `STOPPED` state.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    STOPPED: 'stopped',\n    /**\n     * Emitted when the timer is reset.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    RESET: 'reset',\n    /**\n     * Emitted when a task is executed.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    TASK: 'task',\n    /**\n     * Emitted when a task is added to `TaskTimer` instance.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    TASK_ADDED: 'taskAdded',\n    /**\n     * Emitted when a task is removed from `TaskTimer` instance.\n     * Note that this will not be emitted when `.reset()` is called; which\n     * removes all tasks silently.\n     * @memberof TaskTimer.Event\n     * @type {String}\n     */\n    TASK_REMOVED: 'taskRemoved'\n});\n\n/**\n * Enumerates the `TaskTimer` states.\n * @enum {Number}\n * @readonly\n */\nTaskTimer.State = Object.freeze({\n    /**\n     * Indicates that the timer is in `IDLE` state.\n     * This is the initial state when the `TaskTimer` instance is first created.\n     * Also when an existing timer is reset, it will be `IDLE`.\n     * @memberof TaskTimer.State\n     * @type {Number}\n     */\n    IDLE: 0,\n    /**\n     * Indicates that the timer is in `RUNNING` state; such as when the timer is\n     * started or resumed.\n     * @memberof TaskTimer.State\n     * @type {Number}\n     */\n    RUNNING: 1,\n    /**\n     * Indicates that the timer is in `PAUSED` state.\n     * @memberof TaskTimer.State\n     * @type {Number}\n     */\n    PAUSED: 2,\n    /**\n     * Indicates that the timer is in `STOPPED` state.\n     * @memberof TaskTimer.State\n     * @type {Number}\n     */\n    STOPPED: 3\n});\n\n// ---------------------------\n// HELPER METHODS\n// ---------------------------\n\n// simple shallow defaults extender.\nfunction _defaults(object, defaults) {\n    if (!object) return defaults || {};\n    if (!defaults) return object || {};\n    var key;\n    for (key in defaults) {\n        if (defaults.hasOwnProperty(key)\n                && object[key] === undefined) {\n            object[key] = defaults[key];\n        }\n    }\n    return object;\n}\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default TaskTimer;\n\n// ---------------------------\n// ADDITIONAL DOCUMENTATION\n// ---------------------------\n\n/**\n *  Adds the listener function to the end of the listeners array for the event\n *  named `eventName`. No checks are made to see if the listener has already\n *  been added. Multiple calls passing the same combination of eventName and\n *  listener will result in the listener being added, and called, multiple times.\n *  @name TaskTimer#on\n *  @function\n *  @alias TaskTimer#addListener\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n\n/**\n *  Adds a one time listener function for the event named `eventName`. The next\n *  time eventName is triggered, this listener is removed and then invoked.\n *  @name TaskTimer#once\n *  @function\n *  @chainable\n *\n *  @param {String} eventName - The name of the event to be added.\n *  @param {Function} listener - The callback function to be invoked per event.\n *\n *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n */\n\n /**\n  *  Removes the specified `listener` from the listener array for the event\n  *  named `eventName`.\n  *  @name TaskTimer#off\n  *  @function\n  *  @alias TaskTimer#removeListener\n  *  @chainable\n  *\n  *  @param {String} eventName - The name of the event to be removed.\n  *  @param {Function} listener - The callback function to be invoked per event.\n  *\n  *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n  */\n\n /**\n  *  Removes all listeners, or those of the specified eventName.\n  *  @name TaskTimer#removeAllListeners\n  *  @function\n  *  @chainable\n  *\n  *  @param {String} eventName - The name of the event to be removed.\n  *  @param {Function} listener - The callback function to be invoked per event.\n  *\n  *  @returns {Object} - `{@link #TaskTimer|TaskTimer}` instance.\n  */\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/tasktimer.js\n **/","'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} [once=false] Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Hold the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var events = this._events\n    , names = []\n    , name;\n\n  if (!events) return names;\n\n  for (name in events) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} [context=this] The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} [context=this] The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter3/index.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}